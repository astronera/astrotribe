generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Categories {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String   @unique @db.VarChar(255)
  body       String?  @db.VarChar(255)
  news       News[]

  @@map("categories")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RegisterInterest {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  referral   String?  @db.VarChar(255)
  interest   String?  @db.VarChar(255)

  @@map("register_interest")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Roles {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @unique(map: "roles_title_key") @db.VarChar(255)
  body       String?  @db.VarChar(255)
  users      Users[]

  @@map("roles")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Statuses {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String?  @db.VarChar(255)

  @@map("statuses")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserFollowers {
  id          String    @id @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  follower_id String    @db.Uuid
  followed_id String    @db.Uuid

  @@map("user_followers")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users {
  email          String?
  given_name     String?
  surname        String?
  username       String?   @db.VarChar
  dob            DateTime? @db.Date
  gender_id      Int?      @db.SmallInt
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  last_seen      DateTime? @default(now()) @db.Timestamptz(6)
  avatar         String?   @default("")
  cover_image    String?   @default("'default.jpg'::text")
  introduction   String?
  quote          String?
  follow_count   Int?      @default(0)
  followed_count Int?      @default(0)
  role_id        BigInt    @default(1)
  auth_id        String    @unique @db.Uuid
  id             BigInt    @id @unique @default(autoincrement())
  roles          Roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model SeoData {
  id      Int      @id @default(autoincrement())
  keyword String
  country String
  date    DateTime @map("scrape_date")
  general Json
  organic Json
  ads     Json
  domain  String

  @@index([keyword], map: "idx_seodata_keyword")
  @@index([date], map: "idx_seodata_date")
  @@index([country], map: "idx_seodata_country")
  @@index([domain], map: "idx_seodata_domain")
  @@map("seo_data")
}

model Embeddings {
  id         BigInt                 @id @default(autoincrement())
  vector     Unsupported("vector")?
  type       String
  created_at DateTime?              @default(now()) @db.Timestamptz(6)
  news       NewsEmbeddings[]

  @@map("embeddings")
}

model NewsEmbeddings {
  id           BigInt     @id @default(autoincrement())
  news_id      BigInt
  embedding_id BigInt
  embedding    Embeddings @relation(fields: [embedding_id], references: [id])
  news         News       @relation(fields: [news_id], references: [id])

  @@map("news_embeddings")
}

model NewsAuthors {
  id        Int     @id @default(autoincrement())
  news_id   BigInt
  author_id Int
  author    Authors @relation(fields: [author_id], references: [id])
  news      News    @relation(fields: [news_id], references: [id])

  @@map("news_authors")
}

model News {
  id          BigInt           @id @default(autoincrement())
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  updated_at  DateTime         @updatedAt @db.Timestamptz(6)
  title       String           @db.VarChar(255)
  link        String           @db.VarChar(255)
  body        String?          @db.VarChar(255)
  category_id BigInt
  category    Categories       @relation(fields: [category_id], references: [id])
  authors     NewsAuthors[]
  embeddings  NewsEmbeddings[]
  tags        NewsTags[]
  summaries   Summaries[]

  @@map("news")
}

model Summaries {
  id         Int      @id @default(autoincrement())
  level      String
  content    String
  created_at DateTime @default(now())
  news_id    BigInt
  news       News     @relation(fields: [news_id], references: [id])

  @@map("summaries")
}

model NewsTags {
  id      Int    @id @default(autoincrement())
  news_id BigInt
  tag_id  Int
  news    News   @relation(fields: [news_id], references: [id])
  tag     Tags   @relation(fields: [tag_id], references: [id])

  @@map("news_tags")
}

model Tags {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  news_tags NewsTags[]

  @@map("tags")
}

model Authors {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  link         String?       @unique
  image        String?
  news_authors NewsAuthors[]

  @@map("authors")
}
