generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model categories {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  title      String    @unique @db.VarChar
  body       String?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model register_interest {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String
  email      String
  referral   String?
  interest   String?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model roles {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String    @unique(map: "roles_title_key") @db.VarChar
  body       String?
  users      users[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model statuses {
  id         Int       @id @default(autoincrement()) @db.SmallInt
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  title      String?   @db.VarChar
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_followers {
  id          String    @id @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  follower_id String    @db.Uuid
  followed_id String    @db.Uuid
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id             BigInt    @id @default(autoincrement())
  email          String
  given_name     String
  surname        String
  username       String?   @db.VarChar
  dob            DateTime? @db.Date
  gender_id      Int?      @db.SmallInt
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  last_seen      DateTime? @default(now()) @db.Timestamptz(6)
  avatar         String?   @default("'defualt.png'::text")
  cover_image    String?   @default("'default.jpg'::text")
  introduction   String?
  quote          String?
  follow_count   Int?      @default(0)
  followed_count Int?      @default(0)
  role_id        BigInt?   @default(1)
  auth_id        String?   @unique @db.Uuid
  roles          roles?    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

view auth_users {
  instance_id                 String?   @db.Uuid
  id                          String    @id @unique @db.Uuid
  aud                         String?   @db.VarChar(255)
  role                        String?   @db.VarChar(255)
  email                       String?   @db.VarChar(255)
  encrypted_password          String?   @db.VarChar(255)
  email_confirmed_at          DateTime? @db.Timestamptz(6)
  invited_at                  DateTime? @db.Timestamptz(6)
  confirmation_token          String?   @db.VarChar(255)
  confirmation_sent_at        DateTime? @db.Timestamptz(6)
  recovery_token              String?   @db.VarChar(255)
  recovery_sent_at            DateTime? @db.Timestamptz(6)
  email_change_token_new      String?   @db.VarChar(255)
  email_change                String?   @db.VarChar(255)
  email_change_sent_at        DateTime? @db.Timestamptz(6)
  last_sign_in_at             DateTime? @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime? @db.Timestamptz(6)
  updated_at                  DateTime? @db.Timestamptz(6)
  phone                       String?   @unique
  phone_confirmed_at          DateTime? @db.Timestamptz(6)
  phone_change                String?
  phone_change_token          String?   @db.VarChar(255)
  phone_change_sent_at        DateTime? @db.Timestamptz(6)
  confirmed_at                DateTime? @db.Timestamptz(6)
  email_change_token_current  String?   @db.VarChar(255)
  email_change_confirm_status Int?      @db.SmallInt
  banned_until                DateTime? @db.Timestamptz(6)
  reauthentication_token      String?   @db.VarChar(255)
  reauthentication_sent_at    DateTime? @db.Timestamptz(6)
  is_sso_user                 Boolean
  deleted_at                  DateTime? @db.Timestamptz(6)

  @@index([instance_id])
  @@map("auth_users")
}

model seo_data {
  id        Int      @id @default(autoincrement())
  keyword   String
  country   String
  date      DateTime @map("scrape_date")
  general   Json
  organic   Json
  ads       Json
  domain    String

  @@index([keyword], name: "idx_seodata_keyword")
  @@index([date], name: "idx_seodata_date")
  @@index([country], name: "idx_seodata_country")
  @@index([domain], name: "idx_seodata_domain")

  @@map("seo_data")
}
